#include <iostream>#include <vector>using namespace std;// Function to heapify a subtree rooted at given indexvoid heapify(vector<int>& arr, int n, int i) {    int smallest = i; // Initialize smallest as root    int left = 2 * i + 1; // Left child    int right = 2 * i + 2; // Right child    // If left child is smaller than root    if (left < n && arr[left] < arr[smallest])        smallest = left;    // If right child is smaller than smallest so far    if (right < n && arr[right] < arr[smallest])        smallest = right;    // If smallest is not root    if (smallest != i) {        swap(arr[i], arr[smallest]);        // Recursively heapify the affected sub-tree        heapify(arr, n, smallest);    }}// Function to perform Heap Sortvoid heapSort(vector<int>& arr) {    int n = arr.size();    // Build heap (rearrange array)    for (int i = n / 2 - 1; i >= 0; i--)        heapify(arr, n, i);    // One by one extract an element from heap    for (int i = n - 1; i > 0; i--) {        // Move current root to end        swap(arr[0], arr[i]);        // Call heapify on the reduced heap        heapify(arr, i, 0);    }}int main() {    int n;    cout << "Enter the number of elements: ";    cin >> n;    vector<int> arr(n);    cout << "Enter " << n << " elements: ";    for (int i = 0; i < n; i++)        cin >> arr[i];    cout << "Original array:" << endl;    for (int i = 0; i < n; i++)        cout << arr[i] << " ";    cout << endl;    heapSort(arr);    cout << "Sorted array:" << endl;    for (int i = 0; i < n; i++)        cout << arr[i] << " ";    cout << endl;    return 0;}