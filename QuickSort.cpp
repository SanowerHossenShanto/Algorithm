#include <iostream>#include <vector>using namespace std;// Function to partition the arrayint partition(vector<int>& arr, int low, int high) {    int pivot = arr[high]; // Pivot element    int i = low - 1; // Index of smaller element    // Iterate through the array    for (int j = low; j < high; j++) {        // If current element is smaller than the pivot        if (arr[j] < pivot) {            i++; // Increment index of smaller element            // Swap arr[i] and arr[j]            swap(arr[i], arr[j]);        }    }    // Swap arr[i+1] and arr[high] (or pivot)    swap(arr[i + 1], arr[high]);    return i + 1;}// Function to perform Quick Sortvoid quickSort(vector<int>& arr, int low, int high) {    if (low < high) {        // Partitioning index        int pi = partition(arr, low, high);        // Sort elements before and after partition        quickSort(arr, low, pi - 1);        quickSort(arr, pi + 1, high);    }}int main() {    int n;    cout << "Enter the number of elements: ";    cin >> n;    vector<int> arr(n);    cout << "Enter " << n << " elements: ";    for (int i = 0; i < n; i++)        cin >> arr[i];    cout << "Original array:" << endl;    for (int i = 0; i < n; i++)        cout << arr[i] << " ";    cout << endl;    quickSort(arr, 0, n - 1);    cout << "Sorted array:" << endl;    for (int i = 0; i < n; i++)        cout << arr[i] << " ";    cout << endl;    return 0;}