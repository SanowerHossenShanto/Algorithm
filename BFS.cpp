#include <iostream>#include <vector>#include <queue>using namespace std;vector<vector<int>> graph;vector<int> color; // Representing colorsvector<int> parent;vector<int> dist;void BFS(int startVertex) {    queue<int> q;    q.push(startVertex);    color[startVertex] = 1; // Marking start vertex as visited    dist[startVertex] = 0; // Set distance of start vertex as 0    parent[startVertex] = -1;    while (!q.empty()) {        int currentVertex = q.front();        q.pop();        for (int neighbor : graph[currentVertex]) {            if (color[neighbor] == 0) { // If neighbor is unvisited                q.push(neighbor);                color[neighbor] = 1; // Mark neighbor as visited                dist[neighbor] = dist[currentVertex] + 1; // Update distance                parent[neighbor] = currentVertex;            }        }        color[currentVertex] = 2; // Mark current vertex as processed (black)    }}string getColor(int c) {    if (c == 0) return "White";    if (c == 1) return "Gray";    if (c == 2) return "Black";    return "Unknown";}string getPath(int start, int end) {    if (end == start) {        return to_string(start);    }    if (parent[end] == -1) {        return "No path exists";    }    return getPath(start, parent[end]) + " -> " + to_string(end);}int main() {    int numVertices, numEdges;    cout << "Enter the number of vertices: ";    cin >> numVertices;    cout << "Enter the number of edges: ";    cin >> numEdges;    graph.resize(numVertices);    color.resize(numVertices, 0); // Initialize all vertices as unvisited (color 0)    parent.resize(numVertices, -1);    dist.resize(numVertices, -1);    cout << "Enter the edges (vertex1 vertex2):" << endl;    int u, v;    for (int i = 0; i < numEdges; ++i) {        cin >> u >> v;        graph[u].push_back(v);        graph[v].push_back(u);    }    int startVertex;    cout << "Enter the starting vertex: ";    cin >> startVertex;    BFS(startVertex);    for (int i = 0; i < numVertices; ++i) {        cout << "Vertex " << i << ": ";        cout << "Color = " << getColor(color[i]) << ", Parent = " << parent[i]             << ", Distance = " << dist[i] << ", Path = " << getPath(startVertex, i) << endl;    }    return 0;}