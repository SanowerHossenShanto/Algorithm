#include <iostream>#include <cstring> // For strlen function// Function to find the maximum of two integersint max(int a, int b) {    return (a > b) ? a : b;}// Function to find the length of the Longest Common Subsequence (LCS)int lcs(char* X, char* Y, int m, int n) {    // Base case: If either string is empty, LCS is 0    if (m == 0 || n == 0)        return 0;    // If the last characters of X and Y are the same,    // then the length of LCS is 1 plus the length of LCS    // of the strings X[0..m-2] and Y[0..n-2]    if (X[m - 1] == Y[n - 1])        return 1 + lcs(X, Y, m - 1, n - 1);    else        // If the last characters of X and Y are different,        // then LCS can be obtained by considering either        // (m-1) characters of X and all characters of Y, or        // all characters of X and (n-1) characters of Y.        // We take the maximum of these two possibilities.        return max(lcs(X, Y, m, n - 1), lcs(X, Y, m - 1, n));}// Driver program to test the above functionint main() {    // Input strings X and Y    char X[100], Y[100];    std::cout << "Enter string X: ";    std::cin.getline(X, 100);    std::cout << "Enter string Y: ";    std::cin.getline(Y, 100);    int m = strlen(X); // Length of string X    int n = strlen(Y); // Length of string Y    // Print the length of LCS    std::cout << "Length of LCS is " << lcs(X, Y, m, n) << std::endl;    return 0;}