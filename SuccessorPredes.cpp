#include <iostream>using namespace std;// Define the structure of a node in the BSTstruct TreeNode {    int data;    TreeNode* left;    TreeNode* right;    TreeNode(int val) : data(val), left(nullptr), right(nullptr) {}};// Function to find the predecessor and successor of a given key in a BSTvoid findPredecessorSuccessor(TreeNode* root, int key, int& predecessor, int& successor) {    if (root == nullptr) {        return;    }    // Traverse the tree to find the predecessor and successor    while (root != nullptr) {        if (root->data == key) {            // Node with the given key is found            if (root->left != nullptr) {                TreeNode* temp = root->left;                while (temp->right != nullptr) {                    temp = temp->right;                }                predecessor = temp->data;            }            if (root->right != nullptr) {                TreeNode* temp = root->right;                while (temp->left != nullptr) {                    temp = temp->left;                }                successor = temp->data;            }            return;        } else if (root->data < key) {            predecessor = root->data;            root = root->right;        } else {            successor = root->data;            root = root->left;        }    }}int main() {    // Create a sample BST    TreeNode* root = new TreeNode(50);    root->left = new TreeNode(30);    root->right = new TreeNode(70);    root->left->left = new TreeNode(20);    root->left->right = new TreeNode(40);    root->right->left = new TreeNode(60);    root->right->right = new TreeNode(80);    // Find predecessor and successor of key 55    int predecessor = -1;    int successor = -1;    int key = 55;    findPredecessorSuccessor(root, key, predecessor, successor);    // Print predecessor and successor    cout << "Predecessor of " << key << ": ";    if (predecessor != -1) {        cout << predecessor;    } else {        cout << "NULL";    }    cout << endl;    cout << "Successor of " << key << ": ";    if (successor != -1) {        cout << successor;    } else {        cout << "NULL";    }    cout << endl;    return 0;}