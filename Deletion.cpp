#include <iostream>using namespace std;// Define the structure of a node in the BSTstruct TreeNode {    int data;    TreeNode* left;    TreeNode* right;    TreeNode(int val) : data(val), left(nullptr), right(nullptr) {}};// Function to find the node with the minimum value in a BSTTreeNode* findMinNode(TreeNode* root) {    while (root->left != nullptr) {        root = root->left;    }    return root;}// Function to delete a node with a given key from the BSTTreeNode* deleteNode(TreeNode* root, int key) {    if (root == nullptr) {        cout << "Node with key " << key << " not found in the BST" << endl;        return root;    }    // Traverse the tree to find the node to be deleted    if (key < root->data) {        root->left = deleteNode(root->left, key);    } else if (key > root->data) {        root->right = deleteNode(root->right, key);    } else {        // Case 1: Node with only one child or no child        if (root->left == nullptr) {            TreeNode* temp = root->right;            delete root;            return temp;        } else if (root->right == nullptr) {            TreeNode* temp = root->left;            delete root;            return temp;        }        // Case 2: Node with two children        TreeNode* temp = findMinNode(root->right);        root->data = temp->data;        root->right = deleteNode(root->right, temp->data);    }    cout << "Node with key " << key << " deleted from the BST" << endl;    return root;}// Function to perform inorder traversal of the BSTvoid inorderTraversal(TreeNode* root) {    if (root == nullptr) {        return;    }    inorderTraversal(root->left);    cout << root->data << " ";    inorderTraversal(root->right);}int main() {    // Create a sample BST    TreeNode* root = new TreeNode(50);    root->left = new TreeNode(30);    root->right = new TreeNode(70);    root->left->left = new TreeNode(20);    root->left->right = new TreeNode(40);    root->right->left = new TreeNode(60);    root->right->right = new TreeNode(80);    cout << "Inorder traversal of the original BST: ";    inorderTraversal(root);    cout << endl;    // Prompt the user to enter the keys to delete    char choice;    do {        int key;        cout << "Enter the key to delete from the BST: ";        cin >> key;        root = deleteNode(root, key);        cout << "Do you want to delete another node? (y/n): ";        cin >> choice;    } while (choice == 'y' || choice == 'Y');    cout << "Inorder traversal of the BST after deletion: ";    inorderTraversal(root);    cout << endl;    return 0;}