#include <iostream>#include <vector>#include <algorithm>using namespace std;struct Item {    int weight;    int profit;    double ratio;  // Profit-to-weight ratio};bool compareItems(const Item& a, const Item& b) {    return a.ratio > b.ratio; // Sort in decreasing order of ratio}double fractionalKnapsack(const vector<Item>& items, int capacity) {    double totalProfit = 0.0;    for (const Item& item : items) {        if (capacity >= item.weight) {            totalProfit += item.profit;            capacity -= item.weight;        } else {            totalProfit += (double)capacity / item.weight * item.profit;            break;        }    }    return totalProfit;}int main() {    int n, capacity;    cout << "Enter the number of items: ";    cin >> n;    vector<Item> items(n);    cout << "Enter the weight and profit of each item:\n";    for (int i = 0; i < n; i++) {        cin >> items[i].weight >> items[i].profit;        items[i].ratio = (double)items[i].profit / items[i].weight;    }    cout << "Enter the knapsack capacity: ";    cin >> capacity;    double maxProfit = fractionalKnapsack(items, capacity);    cout << "Maximum profit achievable: " << maxProfit << endl;    return 0;}