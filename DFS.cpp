#include <iostream>#include <vector>#include <list>#include <unordered_map>using namespace std;enum Color {WHITE, GRAY, BLACK};unordered_map<int, string> hashmap;vector<list<int>> graph;vector<Color> color;vector<int> parent;vector<int> startTime;vector<int> endTime;int time = 0;void DFSVisit(int vertex) {    color[vertex] = GRAY;    time++;    startTime[vertex] = time;    for (int neighbor : graph[vertex]) {        if (color[neighbor] == WHITE) {            parent[neighbor] = vertex;            DFSVisit(neighbor);        }    }    color[vertex] = BLACK;    time++;    endTime[vertex] = time;}void DFS() {    int vertices = graph.size();    color.resize(vertices, WHITE);    parent.resize(vertices, -1);    startTime.resize(vertices, 999);    endTime.resize(vertices, 999);    for (int i = 0; i < vertices; ++i) {        if (color[i] == WHITE) {            DFSVisit(i);        }    }    for (int i = 0; i < vertices; ++i) {        cout << "Vertex " << hashmap[i] << " - Start Time: " << startTime[i] << ", End Time: " << endTime[i];        if (parent[i] == -1)            cout << ", Parent: NILL" << endl;        else            cout << ", Parent: " << hashmap[parent[i]] << endl;    }}int main() {    int vertices = 8;    graph.resize(vertices);    hashmap = {        {0, "S"}, {1, "A"}, {2, "B"}, {3, "C"},        {4, "D"}, {5, "E"}, {6, "F"}, {7, "G"}    };    graph[0] = {1, 3, 4}; // S    graph[1] = {2, 3};    // A    graph[2] = {0};       // B    graph[3] = {2};       // C    graph[4] = {3, 5};    // D    graph[5] = {3};       // E    graph[6] = {4, 5, 7}; // F    graph[7] = {3};       // G    cout << "DFS starting from vertex 0:\n";    DFS();    return 0;}