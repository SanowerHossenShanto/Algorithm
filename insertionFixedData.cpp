#include <iostream>using namespace std;struct Node {    int data;    Node* left;    Node* right;};// Function to create a new nodeNode* newNode(int data) {    Node* temp = new Node;    temp->data = data;    temp->left = temp->right = nullptr;    return temp;}// Function to insert a node into the BSTNode* insert(Node* root, int data) {    if (root == nullptr) {        return newNode(data);    }    if (data < root->data) {        root->left = insert(root->left, data);    } else if (data > root->data) {        root->right = insert(root->right, data);    }    return root;}// Function to print the inorder traversal of the BSTvoid inorderTraversal(Node* root) {    if (root != nullptr) {        inorderTraversal(root->left);        cout << root->data << " ";        inorderTraversal(root->right);    }}int main() {    Node* root = nullptr;    // Insert some nodes    root = insert(root, 50);    root = insert(root, 30);    root = insert(root, 20);    root = insert(root, 40);    root = insert(root, 70);    root = insert(root, 60);    root = insert(root, 80);    // Print the inorder traversal (sorted order for BST)    cout << "Inorder traversal: ";    inorderTraversal(root);    cout << endl;    return 0;}