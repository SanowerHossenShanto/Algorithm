#include <iostream>#include <string>#include <vector>using namespace std;vector<int> naivePatternMatching(const string& text, const string& pattern) {    vector<int> occurrences;    int N = text.length(), M = pattern.length();    for (int i = 0; i <= N - M; i++) {        bool found = true;        for (int j = 0; j < M; j++) {            if (text[i + j] != pattern[j]) {                found = false;                break;            }        }        if (found) occurrences.push_back(i);    }    return occurrences;}int main() {    string text, pattern;    cout << "Enter the text: ";    getline(cin, text);    cout << "Enter the pattern: ";    getline(cin, pattern);    vector<int> occurrences = naivePatternMatching(text, pattern);    if (occurrences.empty()) {        cout << "Pattern not found in the text." << endl;    } else {        cout << "Pattern found at positions: ";        for (int i = 0; i < occurrences.size(); i++) {            cout << occurrences[i];            if (i < occurrences.size() - 1) cout << ", ";        }        cout << endl;    }    return 0;}